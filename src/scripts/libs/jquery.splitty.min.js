/**
 * Splitty 1.0.3
 * A tool for splitting a text element into several other elements
 *
 * Copyright 2019 Anton Rudakov
 *
 * Released on: October 17, 2019
 *
 * https://github.com/rudants/splitty/
 */
(function($){
  $.fn.splitty = function (settings) {
    var _this = this;
    // Declare default settings
    var defaultSettings = {
      parseTimeout: 1000,
      resizeDelay: 2000,
      parseOnResize: true,
      reinitOnResize: false,
      cssString: '',
      parseAttributes: true,
      onParseDone: function () {},
      onBeforeElementParse: function () {},
      onAfterElementParse: function () {},
      onResize: function () {},
      onInit: function () {},
      onReinit: function () {},
      additionalNesting: false,
      additionalNestingClass: ''
    }
    settings = $.extend(defaultSettings, settings);

    // Parse splitty elements
    function parseSplittyElements (inst) {
      var outerWindowWidth = $(window).outerWidth();

      inst.each(function(index, elem) {
        // Temporary node element
        var $tmp = cloneTemporaryElement(elem);

        // Array has final result strings
        var resultStrings = [];

        // Save source content in data-attrbiute
        var sourceContent = $.trim($(elem).html());
        var dataSourceContentName = 'data-splitty-source-content';
        if (!$(elem).attr(dataSourceContentName)) {
          $(elem).attr(dataSourceContentName, sourceContent);
        } else {
          $(elem).html($(elem).attr(dataSourceContentName));
        }

        // Parse all of the text elements ('p' or/and 'span')
        $(elem).find('p, span').each(function(i, e) {
          settings.onBeforeElementParse({
            splitty: $(elem)
          });

          var content = String($(e).text()).split(' ');
          var contentHeight = getElementHeight($tmp);

          var getElemTag = $(e).prop('tagName').toLowerCase();
          var getElemAttributes = getAttributes($(e));

          var getElemText = $tmp.text();

          // Function that adding a ready string element in array named 'resultStrings'
          function addStringToResultsArray () {
            resultStrings.push(createNodeElement(getElemTag, $tmp.text(), getElemAttributes));
            $tmp.html('');
          }

          // Parse each part of the sentence before spaces
          $(content).each(function(i, e){
            if (i < content.length && $tmp.height() <= contentHeight) {
              // Check potential height of the cloned element inside a function
              var potentialHeight = getPotentialHeight($tmp, e);
              if(potentialHeight > contentHeight){
                addStringToResultsArray();
              }

              // Add sentences part in the temporary text element
              $tmp.append(e);
              i + 1 !== content.length && $tmp.append(' ')

              // Add last parts of the parsed sentence in result array
              if (i+1 === content.length) {
                addStringToResultsArray();
              }
            }
          })

          settings.onAfterElementParse({
            splitty: $(elem)
          });
        })

        // Remove temporary element
        $tmp.remove();

        // Replace old content of the elements for new
        $(elem).html('');

        $(resultStrings).each(function(i, e){
          $(elem).append(e)
        })

        $(elem).attr('data-splitty-parse-width', outerWindowWidth);
      })

      settings.onParseDone();
    }

    // Create new node element
    function createNodeElement (tag, content, attributes) {
      if (tag) {
        var $node = $('<'+tag+'>');

        if (content) {
          $node.text($.trim(content));
        }

        if (settings.parseAttributes && attributes) {
          $node.attr(attributes);
        }

        $node.addClass(settings.cssString)

        if (settings.additionalNesting) {
          var innerNodeContent = $node.clone();

          $node = $('<div>');
          $node.attr('data-splitty-additional-nesting', '');
          $node.attr('class', settings.additionalNestingClass)
          $node.append(innerNodeContent);
        }

        return $node;
      }
    }

    // Getter of the potential element height
    function getPotentialHeight (elem, text) {
      if (elem) {
        var $tmp = $(elem).clone().append(text).appendTo('body');
        var getTmpHeight = $tmp.height();

        $tmp.remove();

        return getTmpHeight;
      }
    }

    // Getter of element height
    function getElementHeight (elem, text) {
      if(!text || typeof text === undefined) {
        text = 'splitty';
      }
      if (elem) {
        var $tmp = $(elem).clone().html(text).appendTo('body');
        var getTmpHeight = $tmp.height();

        $tmp.remove();

        return getTmpHeight;
      }
    }

    function getAttributes ($node) {
      var attributes = {};
      $.each($node[0].attributes, function (index, attribute) {
        attributes[attribute.name] = attribute.value;
      });

      return attributes;
    }

    // Clone temporary element
    function cloneTemporaryElement (elem) {
      return $(elem).clone().css({
        visibility: 'hidden',
        opacity: '0',
        width: $(elem).width(),
        height: 'auto',
        fontFamily: $(elem).css('font-family'),
        fontSize: $(elem).css('font-size'),
        fontStyle: $(elem).css('font-style'),
        lineHeight: $(elem).css('line-height'),
        letterSpacing: $(elem).css('letter-spacing'),
        fontVariant: $(elem).css('font-variant'),
        fontWeight: $(elem).css('font-weight')
      }).html('').appendTo('body');
    }

    var splittyResizeTimer;
    function resizeDelay (callback) {
      var finished = false;

      if (!finished) {
        clearTimeout(splittyResizeTimer);
        splittyResizeTimer = setTimeout(function() {
          if (finished = true) {
            callback && callback();
            clearTimeout(splittyResizeTimer);
          }
        }, settings.resizeDelay);
      }
    }

    function renderResult (callback) {
      parseSplittyElements(_this);
      var splittyResizeFunction = function () {
        resizeDelay(function() {
          settings.onResize();
          if (settings.reinitOnResize) {
            reinit();
          }
        });
      }
      $(window).off('resize', splittyResizeFunction);

      if (settings.parseOnResize) {
        $(window).on('resize', splittyResizeFunction);
      }

      typeof callback === 'function' && callback();
    }

    function init () {
      setTimeout(renderResult(settings.onInit), settings.parseTimeout);
    }

    function reinit() {
      setTimeout(renderResult(settings.onReinit), settings.parseTimeout);
    }

    init();
  }
})(jQuery);